#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Function Definitions
# 1. I decided to put my functions into a file .functions just to keep them
#    separate from my entire .bashrc file. This is because I like the idea
#    of being able to debug new things separately.
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# For checking licenses.
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function licenses {
    /project/hw/bin/lmstat -a -c /cad/flexlm/Synopsys.dir/license.dat | /bin/less
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Color settings for prompts.
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function Prompt_Settings {
    local GRAY="\[\033[1;30m\]"
    local LIGHT_GRAY="\[\033[0;37m\]"
    local CYAN="\[\033[0;36m\]"
    local LIGHT_CYAN="\[\033[1;36m\]"
    local NO_COLOUR="\[\033[0m\]"
    local BRIGHTGREEN="\[\033[1;32m\]"
}

function rename_fen { 
    local file=$@
    cp ${file} $(sha1sum ${file} | perl -ne 's/^(.{8}).*/$1/;print;').fen
}

function fen_name {
    echo $(sha1sum "$@" | perl -ne 's/^(.{8}).*/$1/;print;')
}

function save_fen { 
    for i in "$@"
    do
        nname=$(basename "$i" .fen)
        /bin/cp -f "$i" "$FEN_PUZZLES/${nname}_$(fen_name "$i").fen"
    done
}

function save_fen { 
    for i in "$@"
    do
        nname=$(basename "$i" .fen)
        /bin/cp -f "$i" "$FEN_PUZZLES/${nname}_$(fen_name "$i").fen"
    done
}



function paste_fen {
    local todir=$@
    if [ "${todir}" == "" ] ; then
        todir=$HOME/Downloads/CHESS/FenPuzzles/
    fi
    tmp=$(pbpaste | sha1sum ${file} | perl -ne 's/^(.{8}).*/$1/;print;')
    pbpaste > ${todir}/${tmp}.fen
}

function save_pgn {
    for i in "$@"
    do
        nname="$(basename "$i" .pgn)"
        /bin/cp -f "$i" "$PGN_GAMES/${nname}_$(fen_name "$i").pgn"
    done
}


function __git_modified_files {
    expr $(git status --porcelain 2>/dev/null| grep "^M" | wc -l)
}
function __git_modified_unadded {
    expr $(git status --porcelain 2>/dev/null| grep "^ M" | wc -l)
}
function __git_uncommited {
    expr $(git status --porcelain 2>/dev/null| grep "^??" | wc -l)
}

function __git_prompt_jd {

    local name=$1
    local GIT_STAGED
    local GIT_UNSTAGED
    local GIT_UNTRACKED
    local GIT_BRANCH
    local GIT_REMOTE_BRANCH
    local GIT_NUMBER_AHEAD
    local GIT_NUMBER_BEHIND
    local GIT_STASH
    local tmp
    
    if [[ ${name} == "" ]] ; then
        name=".*"
    fi
    entry=$(/bin/grep -P "^${name}:" $HOME/.gitprompts 2>/dev/null)
    if [[ "$?" == "0" ]] ; then
        case "$TERM" in
            "dumb")
                prompt=""
                ;;
            xterm*|rxvt*|eterm*|screen*)
                prompt=$(echo $entry | perl -pne "s/^${name}://g" )
                ;;
        esac
    else
        case "$TERM" in
            "dumb")
                prompt=""
                ;;
            xterm*|rxvt*|eterm*|screen*)
                prompt=""
                ;;
        esac
    fi
    eval $(git_stats.rb)
    #echo "GIT_BRANCH: $GIT_BRANCH"
    #tmp=$prompt
    blah="tmp=\"$(echo -ne $prompt)\""
    #eval $blah
    echo $prompt
    #echo $tmp
}

function __eval_prompt {
    local b
    eval "b=$@"
    echo -ne ${b}
}

function __git_variables {
    local GIT_STAGED
    local GIT_UNSTAGED
    local GIT_UNTRACKED
    local GIT_BRANCH
    local GIT_REMOTE_BRANCH
    local GIT_NUMBER_AHEAD
    local GIT_NUMBER_BEHIND
    local GIT_STASH
    eval $(git_stats.rb)
    #(masterðŸ”ƒâ†‘3â†“2|âœ—2âœš3âš‘2)
    printf "$(__ternary '${GIT_NUMBER_AHEAD}' "\xe2\x86\x91${GIT_NUMBER_AHEAD}" ""  )"
}

function __ternary {
    if [ "$1" ] ; then
        echo -ne "$2"
    else
        echo -ne "$3"
    fi
}

function __git_out_of_sync {
    if [[ $GIT_NUMBER_AHEAD -gt 0 ]] || [[ $GIT_NUMBER_BEHIND -gt 0 ]] ; then
        echo -ne "ðŸ”ƒ"
    fi
}

function __git_number_behind {
    if [[ "${GIT_NUMBER_BEHIND}" -gt 0 ]] ; then
        echo -ne "â†“${GIT_NUMBER_BEHIND}"
    fi
}

function __git_number_ahead {
    if [[ "${GIT_NUMBER_AHEAD}" -gt 0 ]] ; then
        echo -ne "â†‘${GIT_NUMBER_AHEAD}"
    fi
}

function __git_out_of_sync_separator {
    if [[ $GIT_NUMBER_AHEAD -gt 0 ]] || [[ $GIT_NUMBER_BEHIND -gt 0 ]] ; then
        echo -ne "|"
    fi
}

function __git_untracked {
    if [[ $GIT_UNTRACKED -gt 0 ]] ; then
        echo -ne "â€¦"
    fi
}


function __git_check_ok {
    if [[ $GIT_BRANCH != "" ]] && [[ $GIT_BOTH_MODIFIED -le 0 ]] && [[ $GIT_STAGED -le 0 ]] && [[ $GIT_UNSTAGED -le 0 ]] && [[ $GIT_STASH -le 0 ]] && [[ $GIT_UNTRACKED -le 0 ]]; then
        echo -ne "âœ”"
    fi
}

function __git_both_modified {
    if [[ ${GIT_BOTH_MODIFIED} -gt 0 ]] ; then
        echo -ne "âœ—${GIT_BOTH_MODIFIED}"
    fi
}

function __git_staged {
    if [[ $GIT_STAGED -gt 0 ]] ; then
        echo -ne "âš¬${GIT_STAGED}"
    fi
}

function __git_unstaged {
    if [[ $GIT_UNSTAGED -gt 0 ]] ;then
        echo -ne "+${GIT_UNSTAGED}"
    fi
}

function __git_stashed {
    if [[ ${GIT_STASH} -gt 0 ]] ; then
        echo -ne "âš‘${GIT_STASH}"
    fi
}


function __git_blank_if {
    if [[ $1 != "" ]];
    then
       echo -ne "$1"
    fi
}

my_func() {
    echo 'foo="A"; bar="B"'
}

function try_it {
    local foo
    local bar
    eval $(my_func)
    echo $foo $bar
}

function save_firmware {
    local file=$@
    cp ${file} ${file}.$(sha1sum ${file} | perl -ne 's/^(.{8}).*/$1/;print;')
}

function make_nice_filenames {
    local IFS=$(echo -ne "\n\r")
    for i in $@
    do
        j=$(echo $i | perl -ne 's/ /_/g;print;' )
        mv "$i" "$j"
    done
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Turns on and off the full path at the top of the title bar.
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function sprompt {

    if [[ $(tty | perl -pne 's@/dev/([^\d]+).*@$1@;' ) == "tty" ]] ; then
        TITLEBAR=""
    else
        TITLEBAR="\[\033]0;\u@\H: \w\007\]"
    fi

    export TITLEBAR

    if [ "$1" == "on" ]; then
        if [ -f $HOME/.prompt ] ; then
            export MY_PROMPT=$(cat $HOME/.prompt)
        else
            export MY_PROMPT=${SHORT_PROMPT}
        fi
    else
        if [ -f $HOME/.long_prompt ] ; then
            export MY_PROMPT=$(cat $HOME/.long_prompt)
        else
            export MY_PROMPT=${LONG_PROMPT}
        fi
    fi

    tty -s && export PS1=${MY_PROMPT}${TITLEBAR}
}

function load_colors {
    if [[ -f "${HOME}/.colors" ]] ; then
        oldIFS=${IFS}
        IFS=$(echo -ne "\b\n")
        for i in $(cat "$HOME/.colors" ); do 
            eval "$i"; 
        done
        if [[ "${oldIFS}"  != "" ]] ; then
            IFS=$oldIFS
        fi
    fi
}

function cprompt {
    name=$1
    local prompt
    load_colors
    if [[ $(tty | perl -pne 's@/dev/([^\d]+).*@$1@;' ) == "tty" ]] ; then
        TITLEBAR=""
    else
        TITLEBAR="\[\033]0;\u@\H: \w\007\]"
    fi

    export TITLEBAR
    entry=$(/bin/grep -P "^${name}:" $HOME/.prompts)
    if [[ "$?" == "0" ]] ; then
        case "$TERM" in
            "dumb")
                export PS1="> "
                ;;
            xterm*|rxvt*|eterm*|screen*)
                prompt=$(echo $entry | perl -pne "s/^${name}://g" )
                tty -s && export PS1=${prompt}${TITLEBAR}
                ;;
        esac
    else
        case "$TERM" in
            "dumb")
                export PS1="> "
                ;;
            xterm*|rxvt*|eterm*|screen*)
                tty -s && export PS1=${LONG_PROMPT}
                ;;
        esac
    fi
}



#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Turns on and off the full path at the top of the title bar.
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function stealth {
    TITLEBAR="\[\033]0;\u@\H: \w\007\]"
    export TITLEBAR
    if [ "$1" == "on" ]; then
        export MY_PROMPT=${STEALTH_PROMPT}
    else
        export MY_PROMPT=${SHORT_PROMPT}
    fi

    tty -s && export PS1=${MY_PROMPT}${TITLEBAR}
}


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function lprompt {
    tty -s && export PS1=${MY_PROMPT}${TITLEBAR}
}


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# I use this to display a specific title...
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function xtitle {
# Turn off the menu prompt
    tty -s && export PS1=${MY_PROMPT}   
    echo -e "\033]0;$@\007"
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Turning off the Xtitle
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function notitle {
    tty -s && export PS1=$MY_PROMPT
}


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Function for looking up names
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function name {
    /usr/local/contrib/bin/phonebook $@
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# For Loading aliases...
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function ldalias {
    local alias_cmd
    local alias_name
    while read -r line; do
#            echo "Line is $line"
            `echo $line | grep -v "^ *#" >&1 > /dev/null`
            if [ $? ] ; then
                alias_name=`echo $line | perl -ne 's/(.*?)=.*/$1/; print;'`
                if [ ! -z "${alias_name}" ] ; then
                    alias_cmd=`echo $line | perl -ne 's/.*?=(.*)$/$1/; print;'`
                    if [ ! -z "${alias_cmd}" ] ; then
#                    echo "Evalueating"
#                    echo "alias ${alias_name}=${alias_cmd}"
                        echo "alias ${alias_name}=${alias_cmd}" >> ${HOME}/.bash_alias
                        eval "alias ${alias_name}=${alias_cmd} " >&1 > /dev/null
                    fi
                fi
            fi
    done < $1
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# function for switching on tcsh mode
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function cadence {
    exec /usr/local/bin/tcsh
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Alias for the dir command
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function dir {
    /bin/ls -alF  $1 | grep "^d"
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
#
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function dirs {
    local dir
    local filter="[^\.]"
    if [[ "$1" != ""  ]] && [ -d "$1" ]  ; then
#        echo "Using dir '$@'"
        dir=$1
        if [[ $# == 2 ]] ; then
#            echo "using custom filter"
            filter=$2
        fi
    else
        dir=.
#        filter="[^\.]"
    fi
#    echo "Using filter '${filter}'"
    ruby -e "print Dir.entries(\"${dir}\").find_all { 
            |i| File.directory?(\"${dir}/#{i}\") &&
                i =~ /^${filter}/
            }.map{ |i| 
               if \"${dir}\" == \"\"  || \"${dir}\" == \".\"
                  i
               else
                  File.new(\"${dir}/#{i}\").to_path
               end

            }.join(\"\n\") + \"\n\""
 }

function ldirs {
    local IFS=$(echo -ne "\n\r")
    if [ $# == 1 ] ; then
        \ls -d $(_dirs $1)
    else
        \ls -d $(_dirs . )
    fi
}


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  For debugging allocation of memory
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function dmalloc { 
eval `command /usr/bin//dmalloc $*` 
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Cleans up the PATH environmental variable
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function pclean {
    PATH=`${MY_CAD}/clean_path.pl $PATH $@`
    export PATH
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Turn on xtitle displays
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function xtitle_on {
    tty -s && export PS1="\h \W % \[\033]0;\u@\H: \w\007\]"
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Display information about each file and directory...
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function dir_stats {
        for i in `/bin/ls`; do du -sm $i ; done
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Displays all the colors of the rainbow...er,... of a Terminal
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function All_Colors {
 T='gYw'   # The test text
 echo -e "\n                 40m     41m     42m     43m\
      44m     45m     46m     47m";
    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
            '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
                '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
        do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
    done
    echo;
    done
    echo
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Lists all of the files in a directory... useful for "for" loops
# 1. Make sure you egrep -v for the "total" string...or else you will
#    get 1 blank entry... which ain't so good.
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function files {
    /bin/ls -l | egrep -v "^d|total" | awk '{ print $9 }' | egrep -v "^ *$ "
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Lists all of the directories in reverse order...so that the most recent
# access is at the bottom
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function rdirs {
    local a=`dirs`
    local IFS=$(echo -ne "\n\r")
    ls -Gltdr --color=auto $(_dirs $1 $2)
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Lists all of the files in reverse order... so that the most recent
# access is at the bottom
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function rfiles {
    local files=`files`
    ll -ltr $files
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Not completed yet...
# My new LS function
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function cls {
    if [ -n `grep d ${1}` ] ; then
    # Know to use directory only
	ll | awk 'print {$9}'
    fi
    /bin/ls $1 -aF

}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Just prints out the week days for the next 10 weeks..
# Useful if you are writing up your weekly status...
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function weekdays {
    perl -MTime::Local -MDate::Manip -MTime::localtime -e '
    $tm = localtime();
    $sub = $tm->wday;
    for( $i = -$sub + 1; $i < 70; $i += 7 ) {
    $tm = localtime();
    $t = timelocal( @{$tm}[0..2], $i + $tm->mday, @{$tm}[4..5] );
    $d = ParseDate("epoch $t");
    $t = timelocal( @{$tm}[0..2], $i + $tm->mday + 4, @{$tm}[4..5] );
    $t1 = UnixDate( $d, "%m/%d/%Y");
    $d = ParseDate("epoch $t");
    $t2 = UnixDate( $d, "%m/%d/%Y");
    print "$t1 - $t2\n";
    }
    '
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Setting up spice environments
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function spice_env {
    export LM_LICENSE_FILE=/cad/flexlm/Avanti.dir/license.dat
    alias hspice='/cad/avanti/current/bin/hspice'
    alias awaves='/cad/avanti/current/bin/awaves'
}

function Unixtime {
        echo $@ | perl -MDate::Manip -e '
                $t = <>;
                chomp $t;
                $date = ParseDate( $t );
                if( $date eq "" ) {
                        print "Bad format\n";
                        exit;
                }
                print UnixDate( $date, "%s\n" ); 
        '
}       


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# For loading
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function ldenv {
    unset my_paths
    for i in `cat $1`
    do
        my_paths=`echo $i | awk 'BEGIN {FS ="=" ; OFS=""}{ print "export ",$1,"=",$2}'`
        eval $my_paths
    done
}

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# For reading in sourced csh files
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function setenv {
    export $1=$2
}

function doit {
        ngspice -r out < $@
}

function open {
  if [[ $(uname -o) == "Cygwin" ]] ; then
	cygstart "$@"	
  else 
      file="$(ruby -ruri -e 'puts URI.decode(ARGV[0]).gsub(/^\S+?:\/\//,"")' "$@")"
      #echo "File: $file"
      gio open "$file"
  fi
}	 

function search {
  tracker-search "$@"
}
function mdfind {
  tracker-search "$@"
}


function mydo {
   flags=$@
   local IFS
   IFS="\n"
   for i in $@ ; do
      flags="$flags $i"
      echo "$i"
   done
}

function rm () {
    trash "$@"
}

function oldrm () {
    local path
    trashdir=$(readlink -f ~/.Trash/ )
    for path in "$@"; do
        # ignore any arguments
        if [[ "$path" = -* ]]; then :
        else
            local dst=$(echo $path | perl -pne 's/^\s*((\.|\.\.)\/)*//' )
            if [[ "$dst" !=  "" ]] ; then
                dst=$(basename "$dst")
                if [ -e ~/.Trash/"${dst}" ]  ; then
                    dst="${dst}_$(date +%Y-%m-%d_%H%M%S.%6N)"
                fi
                mv "$path" "${trashdir}/${dst}"
            fi
        fi
    done
}

function work() { 
    export DIARY_TYPE="work"
}
function personal() {
    export DIARY_TYPE="personal"
}
function aio() {
    export DIARY_TYPE="aio"
}

function __svn_ps1() {
    local s=
    if [[ -d ".svn" ]] ; then
        local r=`__svn_rev`
        local b=`__svn_branch`
        s=" ($b:$r)"
    fi
    echo -n "$s"
}

# Outputs the current trunk, branch, or tag
function __svn_branch() {
    local url=
    if [[ -d .svn ]]; then
        url=`svn info | awk '/URL:/ {print $2}'`
        if [[ $url =~ trunk ]]; then
            echo trunk
        elif [[ $url =~ /branches/ ]]; then
            echo $url | sed -e 's#^.*/\(branches/.*\)/.*$#\1#'
        elif [[ $url =~ /tags/ ]]; then
            echo $url | sed -e 's#^.*/\(tags/.*\)/.*$#\1#'
        fi
    fi
}

# Outputs the current revision
function __svn_rev() {
    local r=$(svn info | awk '/Revision:/ {print $2}')
    
    if [ ! -z $SVN_SHOWDIRTYSTATE ]; then
        local svnst flag
        svnst=$(svn status | grep '^\s*[?ACDMR?!]')
        [ -z "$svnst" ] && flag=*
        r=$r$flag
    fi
    echo $r
}

function vnc_paris () { 
    echo "Connecting to Paris at work"
    echo "You will have to use connection Paris@tunnel"
    ssh -A -L 5900:10.1.1.71:5900 69.199.148.22
}

function memcheck_gtest () {
    for i in $(get_gtests.pl $1 ) 
    do
        valgrind --error-exitcode=231 --tool=memcheck --leak-check=full --show-reachable=yes $1 --gtest_filter=$i 2>/dev/null > /dev/null
        if [[ $? != 0 ]] ; then 
            echo -ne "${RED}$i${RESET}\n"; 
        else 
            echo -ne "${GREEN}$i${RESET}\n"; 
        fi
    done
}
function memcheck_directory () {
    for i in *_test
    do
        valgrind --error-exitcode=231 --tool=memcheck --leak-check=full --show-reachable=yes $i 2>/dev/null > /dev/null
        if [[ $? != 0 ]] ; then 
            echo -ne "not ok # ${RED}$i${RESET}\n"; 
        else 
            echo -ne "ok     # ${GREEN}$i${RESET}\n"; 
        fi
    done
}
function gdb() {
    if [ ! -z GDB_SOURCE_DIRS ] ; then
        search_dirs=$(echo -ne $GDB_SOURCE_DIRS | perl -F: -ane 'print map {"-d $_ "} @F ')
    else
        search_dirs=""
    fi
    # echo "/usr/bin/gdb ${search_dirs} \"$@\""
    /usr/bin/gdb ${search_dirs} "$@"
}

function history_compress() {      
    cp $1 $1.bak;     
    keep=${USE_IXHASH};     
    export USE_IXHASH=1;     
    cat $1 | unique.pl | perl  -0400 -pne 's/#\d{10}\n(?=#\d{10}\n)/$1/gsm;' | sponge $1;     
    if [ "$keep" != "" ] ; then         
        export USE_IXHASH=${keep};     
    else         
        unset USE_IXHASH;     
    fi; 
}

function history_retouch() {      
    for i in ${HISTDIRECTORY}/bash_history_[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9];      
    do          
        j=$(echo $i | perl -ne 's/^.*history_(\d{4})_(\d{2})_(\d{2})_(\d{2})(\d{2})(\d{2})/$1-$2-$3 $4:$5:$6/g;print;' );          
        touch -d "$j" $i;      
    done; 

    for i in ${HISTDIRECTORY}/bash_history_[0-9][0-9][0-9][0-9]_[0-9][0-9];
    do
        j=$(echo $i | perl -ne 's/^.*history_(\d{4})_(\d{2})/$1-$2-1/g;print;' );          
        touch -d "$j" $i;
    done
}

function afind() {
    find . -type f -name "$@"
}

function hfind() {
    grep --binary-files=text $@ $(ls $HISTDIRECTORY/* | tac)
}

function show_cursor()  {
    printf "\033[?25h"
}
function hide_cursor() { 
    printf "\033[?25l"
}

#function emacs {
#         emacsclient $* >/dev/null 2>&1
#}

function emacs {
         EMACSRUNNING=$(ps -ef |grep emacs | grep -v -P "(emacsclient|grep)" | wc -l)
         if [[ $EMACSRUNNING == 0 ]] ; then
            /usr/bin/emacs "$@"
         else
            emacsclient $@ >/dev/null 2>&1
         fi       
}

#function eemacs {
#         emacsclient --create-frame $* >/dev/null 2>&1
#}

function diff {
    git diff --no-index $@
}

function load5() {
    dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null &
}

function load4() {
    dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null &
}

function load3() {
    dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null &
}

function load2() {
    dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null &
}

function load1() {
    dd if=/dev/zero of=/dev/null &
}

function uri() {
    ruby -ruri -e 'puts "file://" + URI.escape(File.expand_path(ARGV[0]),/[;?:$\s@&=+,]/)' "$@"
}

function rmhist() {
    start=$1
    end=$2
    count=$(( end - start ))
    while [ $count -ge 0 ] ; do
        history -d $start
        ((count--))
    done
}
